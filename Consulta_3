#COnsulta 3: Análisis de la relación entre BPM y el ranking de las canciones
Ayuda a identificar si hay géneros o estilos musicales con un BPM característico que tengan más éxito, lo cual es relevante para comprender las preferencias del público.


from pyspark.sql import SparkSession
from dotenv import load_dotenv
import os

# Se cargan las variables de entorno
APP_NAME = "Analisis_Relacion_BPM_Ranking_Canciones"

load_dotenv()

# Para los directorios de entrada y salida
INPUT_DIR = str(os.getenv("DATA_DIR"))
OUTPUT_DIR = str(os.getenv("OUTPUT_DIR"))

# Se crear la sesión de Spark
spark = SparkSession.builder \
    .appName(APP_NAME) \
    .master("yarn") \
    .getOrCreate()

# Ruta de entrada y salida
data_dir = INPUT_DIR
output_dir = f"{OUTPUT_DIR}/{APP_NAME}/"

# Se leen los datos desde HDFS
df = spark.read.option("header", "true") \
    .option("delimiter", ",") \
    .option("encoding", "latin1") \
    .csv(data_dir)

# Se verifica el tipo de datos
df = df.withColumn("BPM", col("BPM").cast("float")) \
       .withColumn("RANKING", col("RANKING").cast("integer"))

# Se agrupa por BPM y calcular el promedio de ranking de las canciones para cada BPM
df_aggregated = df.groupBy("BPM").agg(spark_avg("RANKING").alias("PROMEDIO_RANKING"))

# Se ordenar los resultados por BPM para observar cómo varía el ranking con el BPM
df_aggregated = df_aggregated.orderBy("BPM")

# Se almacenar los resultados en HDFS
df_aggregated.write.mode("overwrite").option("header", "true").csv(output_dir)

# Mostrar los resultados
df_aggregated.show(truncate=False)

# Finalizar sesión
spark.stop()
