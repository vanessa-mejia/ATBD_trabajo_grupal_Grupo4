# 7  Consulta 7: Canciones más populares de todos los tiempos
Identificar las canciones más icónicas y su impacto cultural. Esto es relevante para estudios sobre la longevidad de la música popular.


from pyspark.sql import SparkSession
from dotenv import load_dotenv
import os

# Se procede con la carga de las variables de entorno
APP_NAME = "Canciones_Mas_Populares_De_Todos_Los_Tiempos"

load_dotenv()

# Se validan los directorios de entrada y salida, respectivamente
INPUT_DIR = str(os.getenv("DATA_DIR"))
OUTPUT_DIR = str(os.getenv("OUTPUT_DIR"))

# Se crear la sesión de Spark
spark = SparkSession.builder \
    .appName(APP_NAME) \
    .master("yarn") \
    .getOrCreate()

# Se configuran las rutas de entrada y salida
data_dir = INPUT_DIR
output_dir = f"{OUTPUT_DIR}/{APP_NAME}/"

# Se leen los datos desde HDFS
df = spark.read.option("header", "true") \
    .option("delimiter", ",") \
    .option("encoding", "latin1") \
    .csv(data_dir)

# Se validan los tipos de valirables 
df = df.withColumn("RANKING", col("RANKING").cast("integer")) \
       .withColumn("CANCION", col("CANCION").cast("string"))

# Se procede a agrupar por canción y calcular el total de ranking (popularidad) de cada una
df_aggregated = df.groupBy("CANCION").agg(spark_sum("RANKING").alias("TOTAL_RANKING"))

# Se ordenan los resultados por total de ranking para obtener las canciones más populares
df_aggregated = df_aggregated.orderBy(col("TOTAL_RANKING"), ascending=False)

# Se procede con la selección de las canciones más populares para el top 10
df_top_10 = df_aggregated.limit(10)

#Se almacenan los resultados
df_top_10.write.mode("overwrite").option("header", "true").csv(output_dir)

# Se muestran los resultados
df_top_10.show(truncate=False)

#Se finaliza la sesión
spark.stop()
