#Consulta 4: Ranking de las canciones más populares por género
Permite evaluar qué géneros musicales tienen mayor aceptación en diferentes momentos históricos, lo cual es útil para entender el comportamiento del mercado musical y para personalizar servicios de recomendación.


from pyspark.sql import SparkSession
from dotenv import load_dotenv
import os

# Se cargan las variables de entorno
APP_NAME = "Ranking_Canciones_Populares_Por_Genero"

load_dotenv()

# Se definen los directorios de entrada y salida respectivamente
INPUT_DIR = str(os.getenv("DATA_DIR"))
OUTPUT_DIR = str(os.getenv("OUTPUT_DIR"))

# Se procede a crear la sesión de Spark
spark = SparkSession.builder \
    .appName(APP_NAME) \
    .master("yarn") \
    .getOrCreate()

# Ruta de entrada y salida
data_dir = INPUT_DIR
output_dir = f"{OUTPUT_DIR}/{APP_NAME}/"

# Se leen los datos desde HDFS
df = spark.read.option("header", "true") \
    .option("delimiter", ",") \
    .option("encoding", "latin1") \
    .csv(data_dir)

# Se validan los tipos de variables
df = df.withColumn("RANKING", col("RANKING").cast("integer")) \
       .withColumn("GENERO", col("GENERO").cast("string"))

# Se agrupa por género y calcular el total de ranking por género
df_aggregated = df.groupBy("GENERO").agg(spark_sum("RANKING").alias("TOTAL_RANKING"))

# Se ordenar los resultados por total de ranking
df_aggregated = df_aggregated.orderBy(col("TOTAL_RANKING"), ascending=False)

# Se almacenar los resultados en HDFS
df_aggregated.write.mode("overwrite").option("header", "true").csv(output_dir)

# Mostrar los resultados
df_aggregated.show(truncate=False)

# Finalizar sesión
spark.stop()
